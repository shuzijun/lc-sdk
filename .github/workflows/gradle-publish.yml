# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#publishing-using-gradle

name: Gradle Package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
  push:
    tags:
      - 'v*.*'

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
    - name: Set LD_VERSION
      if: ${{ github.event_name == 'push'}}
      run: echo "LD_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV
    - name: Set LD_VERSION
      if: ${{ github.event_name == 'workflow_dispatch'}}
      run: echo "LD_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV


    - uses: actions/checkout@v2

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: '8' # The JDK version to make available on the path.
        java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
        architecture: x64 # (x64 or x86) - defaults to x64

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: |
           ./gradlew clean
           ./gradlew build
      env:
        LD_VERSION: ${{ env.LD_VERSION }}

    - name: Publish to GitHub Packages
      run: |
           ./gradlew clean
           ./gradlew publish
      env:
        LD_VERSION: ${{ env.LD_VERSION }}
        USERNAME: ${{ github.actor }}
        TOKEN: ${{ secrets.PKG_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.LD_VERSION }}
        release_name: v${{ env.LD_VERSION }}
        draft: true
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./build/libs/lc-sdk-${{ env.LD_VERSION }}.jar
        asset_name: lc-sdk-${{ env.LD_VERSION }}.jar
        asset_content_type: application/java-archive
